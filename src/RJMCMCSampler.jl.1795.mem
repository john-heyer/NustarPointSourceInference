        0 module RJMCMCSampler
        - 
        - using Distributions
        - using NPZ
        - 
        - include("NustarConstants.jl")
        - using .NustarConstants
        - include("TransformPSF.jl")
        - 
        - function jump_proposal(head, up, covariance)
        -     n_sources = convert(Int, length(head)/3)
        -     point_index = rand(1:n_sources)
        -     if up
        -         x, y, b = head[point_index], head[2*point_index], head[3*point_index]
        -         q = rand(MvNormal(covariance))
        -         x_new, y_new, b_new = x + q[1], y + q[2], b + q[3]
        -         sample_new = vcat(
        -             [head[i] for i in 1:point_index], [x_new],
        -             [head[i] for i in point_index+1: 2*point_index], [y_new],
        -             [head[i] for i in 2*point_index+1: 3*point_index], [b_new],
        -             [head[i] for i in 3*point_index+1:length(head)]
        -         )
        -         proposal_acceptance_ratio = 1/pdf(MvNormal(covariance), q)
        -         # TODO: Note that this acceptance ratio will be high!
        -     else
        -         # TODO: how to handle jumps down???
        -         sample_new = vcat(
        -             [head[i] for i in 1:point_index-1],
        -             [head[i] for i in point_index+1: 2*point_index-1],
        -             [head[i] for i in 2*point_index+1: 3*point_index-1],
        -             [head[i] for i in 3*point_index+1:length(head)]
        -         )
        -     end
        - 
        - end
        - 
        - 
        - function source_new(source, covariance)
    11088     q = rand(MvNormal(covariance))
        0     source_out = (source[1] + q[1], source[2] + q[2], source[3] + q[3])
        0     return source_out
        - end
        - 
        - 
        - function proposal(head, covariance)
        0     n_sources = length(head)
      144     sample_new = [source_new(source, covariance) for source in head]
       96     return sample_new, 1
        - end
        - 
        - 
        - function nustar_rjmcmc(model, θ_init, samples, burn_in_steps, covariance, jump_rate)
       80     chain = []
        -     head = θ_init
        -     accepted = 0
        -     ratio_zero = 0
        -     ratio_inf = 0
        -     ratio_mid = 0
        0     for i in 1:(burn_in_steps + samples)
        0         if (i-1) % 50 == 0
      304             println("Iteration: ", i-1)
        -         end
        0         jump = rand(Uniform(0, 1)) < jump_rate
        0         if jump
        -             # println("JUMP")
        0             up = rand(Uniform(0, 1)) < .5
        0             sample_new, proposal_acceptance_ratio = jump_proposal(head, up, covariance)
        -         else
        -             # println("PROPOSAL")
        0             sample_new, proposal_acceptance_ratio = proposal(head, covariance)
        -         end
      240         A = exp(model(sample_new) - model(head)) * proposal_acceptance_ratio
        0         if A == 0
        0             ratio_zero += 1
        -             # declined_rate_image = TransformPSF.compose_mean_image(sample_new)
        -             # previous_rate_image = TransformPSF.compose_mean_image(head)
        -             # sampled_image = model.observed_image
        -             # npzwrite("zero_ratio.npz", Dict(
        -             #     "declined_img" => declined_rate_image,
        -             #     "previous_img" => previous_rate_image,
        -             #     "sampled_img" => sampled_image
        -             #     )
        -             # )
        -             # print("wrote zero rate to numpy")
        0         elseif A == Inf
        0             ratio_inf += 1
        -             # accepted_rate_image = TransformPSF.compose_mean_image(sample_new)
        -             # previous_rate_image = TransformPSF.compose_mean_image(head)
        -             # sampled_image = model.observed_image
        -             # npzwrite("inf_ratio.npz", Dict(
        -             #     "accepted_img" => accepted_rate_image,
        -             #     "previous_img" => previous_rate_image,
        -             #     "sampled_img" => sampled_image
        -             #     )
        -             # )
        -             # print("wrote inf rate to numpy")
        -         else
        0             ratio_mid += 1
        -         end
       48         accept = rand(Uniform(0, 1)) < A
        0         if accept
        -             head = sample_new
        0             accepted += 1
        -         end
        0         if i > burn_in_steps
       48             push!(chain, head)
        -         end
        -     end
      304     println("Proposals: ", burn_in_steps + samples)
      640     println("Accepted: ", accepted)
      288     println("Acceptance rate: ", accepted/(burn_in_steps + samples))
      288     println("Infinite A ratio rate: ", ratio_inf/(burn_in_steps + samples))
      288     println("Zero A ratio rate: ", ratio_zero/(burn_in_steps + samples))
      288     println("Finite A ratio rate: ", ratio_mid/(burn_in_steps + samples))
        0     return chain
        - end
        - 
        - 
        - end  # module
        - 
